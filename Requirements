See below for the description of your new project.

In addition, you'll have to prepare a presentation on stubs and mocks that's shows how these things are useful, with specific examples using a common framework, e.g. Mokito.  I expect your unit-tests to take advantage of stubs and mocks. All incompletes need to be resolved by 2/23/15, which means I expect to see your final work by the end of 2/21/15.

Just to make sure there is no misunderstanding when it comes to grading, here is the breakdown:
Your code: 50%
Automated acceptance test script: 25% (this is separate and distinct from automated unit-testing)
Presentation: 25%
Also, here is the algorithm for testing:
if (build script is missing) then STOP, assign failing grade.
if (build script fails to generate an executable) then STOP, assign failing grade.
if (script to generate unit test coverage information is missing) then STOP, assign failing grade.
if (script to generate unit test coverage information fails) then STOP, assign failing grade.
if (unit test coverage is less than 50%) then STOP, assign failing grade.
Proceed with testing the calendar functionality.

Please let me know if you have any questions.

Virgil
---
Design the software for the following user calendar system:
"The system allows the user to add new appointments, edit existing ones, or delete appointments. Each appointment has a duration, a start date and time. 

Appointments can be recurring -- daily, weekly, monthly, yearly. Recurring appointments can have an end date. Each appointment has a description.  The user can add notes to an appointment. 

When editing or deleting a recurring appointment, the user can edit/delete the current one, all future occurrences, or all occurrence, past, present and future. The user can search the calendar; when searching, the system will return all the appointments that match the search keyword.  The user can list the appointments for today, this week, or this month. The user can load appointment(s) from a file in the .ics format. The user can also export an appointment to an .ics file"

The interface for this calendar is command line.  You will have to develop the commands that allow the user to use the calendar.  You'll also have to develop a script that tests that your calendar software works well.  For the Bakery project I used a bash script, however you can accomplish the task any other way you want. 

All other rules for the project apply, in particular those related to languages you may use, test environment,  automated unit testing and test coverage.